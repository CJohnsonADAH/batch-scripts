#!/bin/bash
#
# fdd-import-sync-files: a bash shell script to mirror the file
# system structure of a floppy diskette, CD-ROM or similar
# removable media into a repository on a stable medium. This will
# usually be called by a higher-level script, for example
# fdd-import. It uses rsync if that is available in the shell
# environment; if looks for the DOS/Windows xcopy utility if rsync
# is not available.
#
# @uses rsync|xcopy.exe
# @uses cmd.exe
# @uses cygpath
# @uses tr
#
# @param --srcdir=PATH mirror the files from the file system location at PATH
# @param --destdir=PATH mirror them to the file system location at PATH
# @param --cmd=NAME the name, if any, if the calling program (for example, fdd-import)
# @return int 0 if successful, non-zero error code if sync utility failed
#
# created: 29-May-2019 (extracted from fdd-import)
# revision: 16-Aug-2019

SCRIPTPATH=$(which $0)
if [[ -L "${SCRIPTPATH}" ]] ; then
	SCRIPTPATH=$(readlink -f "${SCRIPTPATH}")
fi
SCRIPTNAME=$(basename "${SCRIPTPATH}")
SCRIPTDIR=$(dirname "${SCRIPTPATH}")
PATH="${SCRIPTDIR}:${PATH}"

# Default settings can be overridden
DD_PARAMS="sync"
CMD=${SCRIPTNAME}

# loop through command line arguments looking for named or positional parameters
until [[ -z "$1" ]] ; do
	if [[ "$1" =~ ^-{0,2}([a-zA-Z_0-9][^=]*)=(.*)$ ]] ; then
		KEY=$(echo "${BASH_REMATCH[1]}" | tr [:lower:] [:upper:])
		VALUE="${BASH_REMATCH[2]}"
		export "${KEY}"="${VALUE}"
	elif [[ -z "${DDIMG}" ]] ; then
		DDIMG="$1"
	elif [[ -z "${DEVDIR}" ]] ; then
		DEVDIR="$1"
	elif [[ -z "${CMD}" ]] ; then
		CMD="$1"
	fi
	shift
done

# if nobody else called us, then use our own slug in diagnostic messages
if [[ -z "${CMD}" ]] ; then
	CMD=$(basename $0)
fi

EXITCODE=0
	
	echo "[${CMD}] \$ dd if=${DEVDIR} of=${DDIMG} conv=${DD_PARAMS}"

	DDOUT=$(mktemp)
	dd "if=${DEVDIR}" "of=${DDIMG}" "conv=${DD_PARAMS}" 2>&1 | tee "${DDOUT}"
	EXITCODE="${PIPESTATUS[0]}"
	
	grep "error" "${DDOUT}" > /dev/null
	ERRORGREP="$?"

	if [[ "${EXITCODE}" -gt 0 ]] ; then
		echo ""
		echo "[$CMD] WARNING: Possible error state during DD disk image dump." 1>&2
	elif [[ "${ERRORGREP}" -eq 0 ]] ; then
		EXITCODE=1
		echo ""
		echo "[$CMD] WARNING: Possible error state during DD disk image dump." 1>&2
	fi

	rm ${DDOUT}
	
exit $EXITCODE

		