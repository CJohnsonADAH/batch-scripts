#!/bin/bash
#
# fdd-import: a bash shell script to help automate the procedure of importing content from
# a set of diskettes into a repository on a stable medium. Creates sequence-numbered
# directories, takes a disk image using dd, hashes the disk image using certutil,
# stores a directory listing in a test file, and uses rsync to take a snapshot of the
# contents at a file level.
#
# @version 2021.0210
#
# adapted:	28-Mar-2019
# revision:	10-Feb-2021

SCRIPTPATH=$(which "$0")
if [[ -L "${SCRIPTPATH}" ]] ; then
	SCRIPTPATH=$(readlink -f "${SCRIPTPATH}")
fi

CMD=$(basename "${SCRIPTPATH}")

BINDIR=$(dirname "${SCRIPTPATH}")
PATH=${BINDIR}:${PATH}

source "${BINDIR}/fdd-define-aliases"

CMDLINETEXT=$(mktemp)
while [[ $# -gt 0 ]] ; do
	echo "$1" >> "${CMDLINETEXT}"
	shift
done
declare -A _PARAM
declare -a _ARGV
do_parse_command_line "${CMDLINETEXT}"
rm "${CMDLINETEXT}"

if [[ ! -z "${_PARAM[version]}" ]] ; then
	VERSION=$(grep "^# @version" "${SCRIPTPATH}" | head --lines=1 | cut --only-delimited --fields=3- --delimiter=" ")
	echo "${CMD} version ${VERSION}"
	EXITCODE=0
	exit
	
elif [[ ! -z "${_PARAM[help]}" ]] ; then
	echo "Usage: fdd-import [--verbose|--quiet]"
	echo ""
	echo "Capture and document the contents of a series of removable media volumes,"
	echo "such as floppy diskettes or optical media discs."
	echo ""
	exit

elif [[ ! -z "${_PARAM[setup]}" ]] ; then
	echo "Usage: fdd-import [--verbose|--quiet]"
	echo ""
	echo "Setting up local environment for convenient use."
	echo ""
	
	printf "* Checking ~/bin directory... "
	if [[ ! -e "${HOME}/bin" ]] ; then
		mkdir --verbose "${HOME}/bin"
	else
		printf "\t(OK)\n"
	fi
	
	printf "* Checking ~/bin/fdd-import alias... "
	if [[ ! -x "${HOME}/bin/fdd-import" ]] ; then
		ln --symbolic --verbose "${SCRIPTPATH}" "${HOME}/bin/fdd-import"
	else
		printf "\t(OK)\n"
	fi
	
	printf '* Checking ${PATH} for ~/bin ... '
	if ( printf "%s" "${PATH}" | tr ':' "\n" | grep -F "${HOME}/bin" > /dev/null ) ; then
		printf "\t(OK)\n"
		printf "\n---\nPATH='%s'\n---\n" "${PATH}"
	else 
		printf "\t[NOT FOUND]\n"
		printf 'Adding ~/bin to ${PATH} in ~/.bash_profile ...'
		echo 'PATH="${HOME}/bin:${PATH}"' >> "${HOME}/.bash_profile" && printf "\t(OK)\n"
	fi

	printf '* Checking optical disc drive ... '
	DD_OUTPUT=$( dd if=/dev/scd0 of=/dev/null count=1 2>&1 )
	if [ $? -gt 0 ] ; then
		printf "[PROBLEM?]\n" 
	else
		printf "\t(OK)\n" 
	fi
	
	printf "\n---\n%s\n---\n" "${DD_OUTPUT}"
	
	printf '* Checking installed version ... '
	PATH="${HOME}/bin:${PATH}"
	SCRIPT_OUTPUT=$( fdd-import --version )
	if [ $? -gt 0 ] ; then
		printf "[PROBLEM?]\n" 
	else
		printf "\t(OK)\n" 
	fi

	printf "\n---\n%s\n---\n" "${SCRIPT_OUTPUT}"
	
	echo ""
	printf "[${CMD}] When this script finishes, copy all the output and paste into a text file. Then:\n\n"
	printf "  exit\n"
	printf "  \t[... then restart Cygwin]\n\n"
	printf "  fdd --version\n"
	printf "  \t[... the output should be identical to the installed version above.]\n"

	exit 0
	
fi

BASHENVIRONMENT=""
DOSENVIRONMENT=""

DRIVENUMBER=0

DDEXT="dd"

DD_PARAMS="sync"

# Let's open up the props.tsv file
PROPSFILE="./props.tsv"
if [[ -r "${PROPSFILE}" ]] ; then
	while IFS="" read -r LINE ; do
		IFS=$'\t' read -ra FIELDS <<< "${LINE}"
		PROP=`echo "${FIELDS[0]}" | tr [:lower:] [:upper:]`
		
		echo "${PROP}:" "${FIELDS[1]}"
		case "${PROP}" in
			"SLUG")
				SLUG="${FIELDS[1]}"
				;;
			"DESTPARENT")
				DESTPARENT="${FIELDS[1]}"
				;;
			"DRIVENUMBER")
				DRIVENUMBER="${FIELDS[1]}"
				;;
			"DRIVE")
				DRIVE="${FIELDS[1]}"
				;;
			"EXT")
				DDEXT="${FIELDS[1]}"
				;;
			"CONV")
				DD_PARAMS="${FIELDS[1]}"
				;;
			*)
				;;
		esac
	done < "${PROPSFILE}"
	
else
	echo "[$CMD] required: create a props.tsv with PREFIX and DESTPARENT set"
	fdd-import-prep-props && "${SCRIPTPATH}" "$@"
	exit $?
fi

DESTPARENT=`cygpath --unix "${DESTPARENT}" | sed -e 's/\/*$//g'`
DESTPARENT="${DESTPARENT}/"

if [ -z "${DRIVE}" ] ; then
	DEVDIR="/dev/fd${DRIVENUMBER}"
else
	DEVDIR="/dev/${DRIVE}"
fi

DRIVELETTER=$( \
	cygpath --mixed ${DEVDIR} \
	| sed 's/^.*\/\([A-Z]\):$/\1/' \
	| tr '[:upper:]' '[:lower:]' \
)
if [[ -d "/cygdrive/c" ]] ; then
	BASHENVIRONMENT="cygwin"
	SRCDIR="/cygdrive/${DRIVELETTER}"
	DOSFDD="${DRIVELETTER}:"
elif [[ -d "/c" ]] ; then
	BASHENVIRONMENT="mingw"
	SRCDIR="/${DRIVELETTER}"
	DOSFDD="${DRIVELETTER}:"
else
	echo "[${CMD}] Cannot locate Unix filesystem path for DOS drive ${DRIVELETTER}:" 1>2
	exit
fi

DESTSUFFIX=foo
until [ -z "${DESTSUFFIX}" ] ; do

	LASTDESTDIR=$(find "${DESTPARENT}" -maxdepth 1 -type d -name "${SLUG}[0-9]*" | sort | tail -n 1)

	if [ ! -z "${LASTDESTDIR}" ] ; then
		echo "[${CMD}] last volume:" "${LASTDESTDIR}"
		LASTDESTIDX=`basename "${LASTDESTDIR}" | sed --regexp-extended "s/^${SLUG}([0-9]+).*$/\1/"`
	else
		LASTDESTIDX=0
	fi
	
	NEXTDESTIDX=`printf "%03d" $(( 10#${LASTDESTIDX} + 1 ))`
	DESTBASE="${SLUG}${NEXTDESTIDX}"
	DESTDIR="${DESTPARENT}${DESTBASE}"

	read -p "[${CMD}] next volume: ${DESTDIR}-" DESTSUFFIX
	
	if [ ! -z "${DESTSUFFIX}" ] ; then
		LWD="${PWD}"

		DESTDIR="${DESTDIR}-${DESTSUFFIX}"

		echo "[$CMD]" $( mkdir --parents --verbose "${DESTDIR}" )

		cd "${DESTDIR}"
		
		ERRFILE="${DESTDIR}/${DESTBASE}-${DESTSUFFIX}.err.txt"
		touch "${ERRFILE}"
		
		# DISK-LEVEL: Get any text inscribed on the label
		echo ""
		echo "LABEL: (Press Ctrl-D when done)"
		echo "-------------------------------"
		cp /dev/tty "${DESTBASE}.label.txt"
		echo "------------- EOF -------------"
		echo ""
		cd "${LWD}"
		
		# DISK-LEVEL: chdir to verify the presence of a floppy disk in the expected drive
		LINE="NAK"
		while [[ "${PWD}" != "${SRCDIR}" && "${LINE}" != "OK" ]] ; do
			echo "[$CMD] \$ cd '${SRCDIR}'"
			cd "${SRCDIR}" || {
				export LINE ;
				echo "Please insert the floppy and press ENTER." ;
				read LINE ;
			}
			sleep 1
		done
		cd "${LWD}"

		ERRORSTATE=""

		# BLOCK-LEVEL: TAKE A DISK IMAGE THEN COMPUTE A HASH & WRITE A TIMESTAMPPED RECORD
		DDIMG="${DESTDIR}/${DESTBASE}.${DDEXT}"

		echo "[${CMD}] Disk Image and MD5:" 2>&1 | tee --append "${ERRFILE}" 
		echo "--- cut here ---" 2>&1 | tee --append "${ERRFILE}" 

		fdd-import-disk-image --ddimg="${DDIMG}" --devdir="${DEVDIR}" \
			--cmd="${CMD}" --dd_params="${DD_PARAMS}" 2>&1 | tee --append "${ERRFILE}" 
		[[ "${PIPESTATUS[0]}" -gt 0 ]] && ERRORSTATE="${ERRORSTATE}+dd"
		
		fdd-import-dd-md5 --ddimg="${DDIMG}" --lwd="${LWD}" --errorstate="${ERRORSTATE}" \
			--cmd="${CMD}" 2>&1 | tee --append "${ERRFILE}" 
		[[ "${PIPESTATUS[0]}" -gt 0 ]] && ERRORSTATE="${ERRORSTATE}+md5"
		
		echo "--- cut here ---" 2>&1 | tee --append "${ERRFILE}" 
		echo "" 2>&1 | tee --append "${ERRFILE}" 
		
		# FILE-LEVEL: TAKE A DOS DIR LISTING, THEN RSYNC/XCOPY EVERYTHING OVER
		DIRFILE="${DESTDIR}/${DESTBASE}.dir.txt"
		
		echo "[${CMD}] File System Listing and Mirror:" 2>&1 | tee --append "${ERRFILE}"
		echo "--- cut here ---" 2>&1 | tee --append "${ERRFILE}"

		fdd-import-dir-listing --dirfile="${DIRFILE}" --dosfdd="${DOSFDD}" \
			--cmd="${CMD}" 2>&1 | tee --append "${ERRFILE}"
		[[ "${PIPESTATUS[0]}" -gt 0 ]] && ERRORSTATE="${ERRORSTATE}+dir"

		fdd-import-sync-files --srcdir="${SRCDIR}" --destdir="${DESTDIR}" \
			--cmd="${CMD}" --driveletter="${DRIVELETTER}" 2>&1 | tee --append "${ERRFILE}"
		[[ "${PIPESTATUS[0]}" -gt 0 ]] && ERRORSTATE="${ERRORSTATE}+sync-files"

		echo "--- cut here ---" 2>&1 | tee --append "${ERRFILE}"
		
		if [ ! -z "${ERRORSTATE}" ] ; then
			ERRORSTATE=`echo ${ERRORSTATE} | sed 's/^[+]//'`
			echo "[${CMD}] WARNING: Possible errors, ${ERRORSTATE}" 2>&1 | tee --append "${ERRFILE}" 1>&2
		else
			echo "[${CMD}] ALLES IN ORDNUNG: image, hash and mirror all OK." 2>&1 | tee --append "${ERRFILE}"
			rm "${ERRFILE}"
		fi
		echo ""
		
	fi
	
done
