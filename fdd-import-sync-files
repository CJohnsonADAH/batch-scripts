#!/bin/bash
#
# fdd-import-sync-files: a bash shell script to mirror the file
# system structure of a floppy diskette, CD-ROM or similar
# removable media into a repository on a stable medium. This will
# usually be called by a higher-level script, for example
# fdd-import. It uses Windows ROBOCOPY if that is available in the
# shell environment, it looks for rsync if ROBOCOPY is not available;
# finally, it looks for the DOS/Windows xcopy utility if neither
# ROBOCOPY nor rsync is available.
#
# @uses robocopy.exe|rsync|xcopy.exe
# @uses cmd.exe
# @uses cygpath
# @uses tr
#
# @param --srcdir=PATH mirror the files from the file system location at PATH
# @param --destdir=PATH mirror them to the file system location at PATH
# @param --cmd=NAME the name, if any, if the calling program (for example, fdd-import)
# @return int 0 if successful, non-zero error code if sync utility failed
#
# created: 29-May-2019 (extracted from fdd-import)
# revision: 5-Feb-2021
#
# @version 2021.0205

SCRIPTPATH=$(which "$0")
if [[ -L "${SCRIPTPATH}" ]] ; then
	SCRIPTPATH=$(readlink -f "${SCRIPTPATH}")
fi

# loop through command line arguments looking for named or positional parameters
while [[ "$#" -gt 0 ]] ; do
	if [[ "$1" =~ ^-{0,2}([a-zA-Z_0-9][^=]*)\s*=\s*(.*)\s*$ ]] ; then
		KEY=$(echo "${BASH_REMATCH[1]}" | tr [:lower:] [:upper:])
		VALUE="${BASH_REMATCH[2]}"

		export "${KEY}"="${VALUE}"
	elif [[ -z "${SRCDIR}" ]] ; then
		SRCDIR="$1"
	elif [[ -z "${DESTDIR}" ]] ; then
		DESTDIR="$1"
	elif [[ -z "${CMD}" ]] ; then
		CMD="$1"
	fi
	shift
done

# if nobody else called us, then use our own slug in diagnostic messages
if [[ -z "${CMD}" ]] ; then
	CMD=`basename "${SCRIPTPATH}"`
fi

EXITCODE=0

export GET_PATH=cygpath
( which "${GET_PATH}" 2>&1 >/dev/null ) || GET_PATH=wslpath

export COPY=robocopy ;
( which "${COPY}" 2>&1 > /dev/null ) || COPY=rsync
( which "${COPY}" 2>&1 > /dev/null ) || COPY=xcopy

declare -A EXE
declare -A PRE
declare -A SRC
declare -A DEST
declare -A POST
declare -A OKEXIT

EXE[robocopy]="robocopy.exe"
PRE[robocopy]=""
SRC[robocopy]="$( ${GET_PATH} -w "${SRCDIR}" )"
DEST[robocopy]="$( ${GET_PATH} -w "${DESTDIR}" )\\${DRIVELETTER}"
POST[robocopy]="/e /copy:DAT"
OKEXIT[robocopy]=1

EXE[rsync]="rsync"
PRE[rsync]="--archive --itemize-changes"
SRC[rsync]="$( ${GET_PATH} -u "${SRCDIR}" )"
DEST[rsync]="$( ${GET_PATH} -u "${DESTDIR}" )"
POST[rsync]=""
OKEXIT[rsync]=0

EXE[xcopy]="cmd /c 'xcopy.exe"
PRE[xcopy]=""
SRC[xcopy]="$( ${GET_PATH} -w "${SRCDIR}" )"
DEST[xcopy]="$( ${GET_PATH} -w "${DESTDIR}" )\\${DRIVELETTER}"
POST[xcopy]="/c /e /h /i /k /q /r /s /x /y'"
OKEXIT[xcopy]=0

echo "[${CMD}] \$ ${EXE[$COPY]} ${PRE[$COPY]} ${SRC[$COPY]} ${DEST[$COPY]} ${POST[$COPY]}"
echo "--- cut here ---"
${EXE[$COPY]} ${PRE[$COPY]} "${SRC[$COPY]}" "${DEST[$COPY]}" ${POST[$COPY]} || {
	EXITCODE=$?
	
	if [ "${EXITCODE}" -gt "${OKEXIT[${COPY}]}" ] ; then
		
		echo ""
		echo "[${CMD}] WARNING: Possible error state during ${COPY} file system mirror. Exit code: ${EXITCODE}" ;

	else

		EXITCODE=0 # Nevermind! It's OK!
		
	fi
}
echo "--- cut here ---"
echo ""

exit $EXITCODE

		